#!/bin/sh

set -o errexit
set -o pipefail

log() {
  _fg=''
  [ "${1}" = "red" ] && _fg='\033[0;31m'
  [ "${1}" = "blue" ] && _fg='\033[0;34m'
  [ "${1}" = "green" ] && _fg='\033[0;32m'
  shift
  # shellcheck disable=SC2145
  echo -e "${_fg}>>> ${@}\033[0m"
}

_checkenv(){
  missing=""
  for v in CLUSTER STATE_BUCKET STATE_KEY_PREFIX CLUSTER_STATE_BUCKET CLUSTER_STATE_KEY_PREFIX; do
    vn="PIPELINE_${v}"
    fv=""
    eval fv="\$$vn"
    if [ -z "${fv}" ]; then
      missing="${missing}\n\t${vn}"
    fi
  done
  if [ ! -z "${missing}" ]; then
    echo "missing environment variables: ${missing}"
    exit 1
  fi
}

_checkenv

cluster="${PIPELINE_CLUSTER}"

changed_dirs=$(git diff-tree --no-commit-id --name-only -r $master_base_sha $branch_head_sha | awk 'BEGIN{FS=OFS="/"}/\/resources\//{NF-=1; print $3}' | sort | uniq | grep "${PIPELINE_CLUSTER}")

log green "planning for cluster ${cluster}"
( set -x; kubectl config use-context "${cluster}" ) || { log red "no context found, skipping ${cluster}" && exit 1; }
if [ -n "$changed_dirs" ]; then
  for _f in ${changed_dirs}; do
    namespace="$(basename ${_f})"
    terraform_resources_path="namespaces/${cluster}/${namespace}/resources"
    if [ -d "${terraform_resources_path}" ]; then
      cd "${terraform_resources_path}"
      log blue "Planning terraform resources for namespace ${namespace} in ${cluster}"
      terraform init \
        -backend-config="bucket=${PIPELINE_STATE_BUCKET}" \
        -backend-config="key=${PIPELINE_STATE_KEY_PREFIX}${cluster}/${namespace}/terraform.tfstate" \
        -backend-config="region=${PIPELINE_STATE_REGION}"
      terraform plan \
        -var="cluster_name=${cluster%%.*}" \
        -var="cluster_state_bucket=${PIPELINE_CLUSTER_STATE_BUCKET}" \
        -var="cluster_state_key=${PIPELINE_CLUSTER_STATE_KEY_PREFIX}${cluster%%.*}/terraform.tfstate"
      cd $OLDPWD
    fi
  done
else
  log blue "No terraform changes in this PR"
fi
