#!/usr/bin/env ruby

require File.join(".", File.dirname(__FILE__), "pipeline")
require 'yaml'
require 'json'
require 'base64'

def main(cluster)
  log("green", "applying for cluster #{cluster}")

  set_kube_context(cluster)
  apply_cluster_level_resources(cluster)
  apply_namespaces(cluster)

  log("green", "Done.")
end

def apply_namespaces(cluster)
  Dir["namespaces/#{cluster}/*"].each do |namespace_dir|
    execute("git pull") # In case any PRs were merged since the pipeline started
    apply_namespace_dir(cluster, namespace_dir)
    create_gpg(namespace_dir)
  end
end
  
def create_gpg(namespace_dir)
  team_name = parse_team_name(namespace_dir)
  namespace = File.basename(namespace_dir)
  generate_gpg_key(namespace, team_name)
end

def parse_team_name(namespace_dir)
  yaml = YAML.load(File.read("#{namespace_dir}/01-rbac.yaml"))
  team = yaml['subjects'][0].dig('name').split(':')[1]
  team.nil? && abort("Team name not found")
  return team
end

def generate_gpg_key(namespace, team_name)
  homedir = `mktemp -d "${TMPDIR:-/tmp}/simplegpg-XXXXXX"`.chomp
  open("#{homedir}/gpgconf", 'w+') do |f|
    f << "%no-protection\n" 
    f << "Key-Type: default\n"
    f << "Key-Usage: encrypt\n"
    f << "Name-Real: Cloud Platform\n"
    f << "Name-Email: platforms@digital.justice.gov.uk\n"
    f << "Expire-Date: 0\n"
  end
  pubkey = "#{homedir}/gitops.asc"
  seckey = "#{homedir}/gitops.pgp"
  comment = "gitops-#{namespace}"
  create_key(homedir)
  export_private_key(homedir, comment, seckey)
  export_public_key(homedir, comment, pubkey)
  pub=Base64.strict_encode64(File.open(pubkey, "rb").read)
  sec=Base64.strict_encode64(File.open(seckey, "rb").read)
  pass_to_secret("concourse-#{team_name}", "gitops-key", sec)
  pass_to_secret(namespace, "gitops-key", pub)
  key_id=`gpg --import #{pubkey} 2>&1 | grep -i "platform" | awk -F' |:' '{print $4}'`
  print "you must now add the Gitops key to your repo with \n git-crypt add-gpg-user --trusted #{key_id} \n"
end

def create_key(homedir) 
  generate_key = `gpg --quiet --homedir #{homedir} --batch --lock-never --gen-key  #{homedir}/gpgconf`
  generate_key 
end 

def export_private_key(homedir, comment, seckey)
  export_private = `gpg --quiet --homedir #{homedir} --batch --lock-never --pinentry-mode loopback --armor --comment #{comment} --export-secret-keys --output #{seckey}`
  export_private
end

def export_public_key(homedir, comment, pubkey)
  export_public = `gpg --quiet --homedir #{homedir} --batch --lock-never --armor --comment #{comment} --export --output #{pubkey}`
  export_public
end
  
def pass_to_secret(namespace, name, key)
  json = <<~EOF
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "#{name}",
      "namespace": "#{namespace}"
    },
    "data": {
      "key": "#{key}"
    }
  }
  EOF

  jsn = JSON.parse(json).to_json

  cmd = %[echo '#{jsn}' | kubectl -n #{namespace} apply -f -]
  print "secret #{name} created in #{namespace}" if `#{cmd}`
end

main ENV.fetch("PIPELINE_CLUSTER")
