#!/usr/bin/env ruby

require File.join(".", File.dirname(__FILE__), "pipeline")
require 'yaml'

def main(cluster)
  log("green", "applying for cluster #{cluster}")

  set_kube_context(cluster)
  apply_cluster_level_resources(cluster)
  apply_namespaces(cluster)

  log("green", "Done.")
end

def apply_namespaces(cluster)
  Dir["namespaces/#{cluster}/*"].each do |namespace_dir|
    execute("git pull") # In case any PRs were merged since the pipeline started
    apply_namespace_dir(cluster, namespace_dir)
    create_gpg(namespace_dir)
  end
end
  
def create_gpg(namespace_dir)
  team_name = parse_team_name(namespace_dir)
  namespace = File.basename(namespace_dir)
  generate_gpg_key(namespace, team_name)
end

def parse_team_name(namespace_dir)
  yaml = YAML.load(File.read("#{namespace_dir}/01-rbac.yaml"))
  team = yaml['subjects'][0].dig('name').split(':')[1]
  team.nil? && abort("Team name not found")
  return team
end

def generate_gpg_key(namespace, team_name)
  homedir = `mktemp -d "${TMPDIR:-/tmp}/simplegpg-XXXXXX"`
  open("#{homedir}/gpgconf", 'w+') do |f|
    f << "%no-protection\n" 
  end
  pubkey = `#{homedir}/gitops.asc`
  seckey = `#{homedir}/gitops.pgp`
  comment = `gitops-#{namespace}`
  create_key(homedir, comment)
  export_private_key(homedir, comment, seckey)
  export_public_key(homedir, comment, pubkey)
  pass_to_secret(pubkey, seckey)
end

def create_key(homedir, comment) 
  generate_key = `gpg --quiet --homedir #{homedir} --batch --lock-never --quick-generate-key #{comment} rsa4096 encrypt never 2>/dev/null #{homedir}/gpgconf`
  generate_key 
end 

def export_private_key(homedir, comment, seckey)
  export_private = `gpg --quiet --homedir #{homedir} --batch --lock-never --pinentry-mode loopback --armor --comment #{comment} --export-secret-keys --output #{seckey}`
  export_private
end

def export_public_key(homedir, comment, pubkey)
  export_public = `gpg --quiet --homedir #{homedir} --batch --lock-never --armor --comment #{comment} --export --output #{pubkey}`
  export_public
end
  
def pass_to_secret(pubkey, seckey)
  puts "#{pubkey}, #{seckey}"
end

main ENV.fetch("PIPELINE_CLUSTER")
